import numpy as npimport skfuzzyimport skfuzzy.control as ctrlweather = ctrl.Antecedent(np.arange(0, 101, 1), 'weather')light = ctrl.Antecedent(np.arange(0, 101, 1), 'light')obstacle = ctrl.Antecedent(np.arange(0, 101, 1), 'obstacle')brake = ctrl.Consequent(np.arange(0, 101, 1), 'brake')weather['sunny'] = skfuzzy.trimf(weather.universe, [0, 0, 30.6320081549439])weather['rainy'] = skfuzzy.trimf(weather.universe, [16.4, 50, 76.9113149847095])weather['hazy'] = skfuzzy.trimf(weather.universe, [58.3333333333333, 100, 100])light['green'] = skfuzzy.gaussmf(light.universe, 0, 28.79)light['yellow'] = skfuzzy.gaussmf(light.universe, 50, 10.91)light['red'] = skfuzzy.gaussmf(light.universe, 100, 16.49)obstacle['absent'] = skfuzzy.trapmf(brake.universe, [0, 0, 55.5, 67.1253822629969])obstacle['present'] = skfuzzy.trapmf(brake.universe, [53.2619775739042, 90, 100, 100])brake['low'] = skfuzzy.trimf(brake.universe, [0, 0, 41.6666666666667])brake['medium'] = skfuzzy.trimf(brake.universe, [8.33333333333333, 50, 91.6666666666667])brake['high'] = skfuzzy.trimf(brake.universe, [58.3333333333333, 100, 100])weather.view()light.view()obstacle.view()brake.view()rule1 = ctrl.Rule(weather['sunny'] & light['green'] & obstacle['absent'], brake['low'])rule2 = ctrl.Rule(weather['rainy'] & light['green'] & obstacle['absent'], brake['medium'])rule3 = ctrl.Rule(weather['sunny'] & light['yellow'] & obstacle['absent'], brake['medium'])rule4 = ctrl.Rule(weather['rainy'] & light['yellow'] & obstacle['absent'], brake['high'])rule5 = ctrl.Rule(light['red'], brake['high'])rule6 = ctrl.Rule(weather['hazy'], brake['high'])rule7 = ctrl.Rule(obstacle['present'], brake['high'])rule1.view()braking_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7])braking = ctrl.ControlSystemSimulation(braking_ctrl)braking.input['weather'] = 10braking.input['light'] = 80braking.input['obstacle'] = 20braking.compute()print(braking.output['brake'])brake.view(sim=braking)